// Jai Shree Babosa!

#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int M = 1e9 + 7;

// Subsequence Counting

// Statement:
// We are given two strings, ‘TEXT' and ‘S’. We have to calculate the no. of subsequences of ‘TEXT’, which are equal to ‘S’. Since the answer can be very large print it modulo (10^9)+7.
// A Subsequence of a string is the string that is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.

ll f(string &t, string &s, int i, int j, vector<vector<ll>> &dp)
{
    if (j < 0)
        return 1;
    if (i < 0)
        return 0;
    if (dp[i][j] != -1)
        return dp[i][j];

    if (t[i] == s[j])
        return dp[i][j] = (f(t, s, i - 1, j - 1, dp) + f(t, s, i - 1, j, dp)) % M;
    else
        return dp[i][j] = f(t, s, i - 1, j, dp) % M;
}

int subsequenceCounting(string &t, string &s, int lt, int ls)
{
    // vector<vector<ll>> dp(lt, vector<ll>(ls, -1));
    // return (int)(f(t, s, lt - 1, ls - 1, dp) % M);

    vector<vector<ll>> dp(lt + 1, vector<ll>(ls + 1, 0));
    for (int i = 0; i < lt + 1; i++)
        dp[i][0] = 1;
    // Imp
    for (int j = 1; j < ls + 1; j++)
        dp[0][j] = 0;

    for (int i = 1; i < lt + 1; i++)
    {
        for (int j = 1; j < ls + 1; j++)
        {
            if (t[i - 1] == s[j - 1])
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % M;
            else
                dp[i][j] = dp[i - 1][j] % M;
        }
    }
    return (int)(dp[lt][ls] % M);
}

int subsequenceCounting(string &t, string &s, int lt, int ls)
{
    vector<ll> prev(ls + 1, 0);
    vector<ll> curr(ls + 1);
    prev[0] = 1, curr[0] = 1;

    for (int i = 1; i < lt + 1; i++)
    {
        for (int j = 1; j < ls + 1; j++)
        {
            if (t[i - 1] == s[j - 1])
                curr[j] = (prev[j - 1] + prev[j]) % M;
            else
                curr[j] = prev[j] % M;
        }
        prev = curr;
    }
    return (int)(prev[ls] % M);
}